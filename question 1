import java.util.Scanner;

class TreeNode {
    long value;
    TreeNode left;
    TreeNode right;

    TreeNode(long value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

public class TreeProduct {
    static final long MOD = 1000000007;

    static long max(long a, long b) {
        return (a > b) ? a : b;
    }

    static TreeNode buildTree(int height, long[] values, int startIndex) {
        if (height == 0) {
            return new TreeNode(values[startIndex]);
        }

        TreeNode node = new TreeNode(values[startIndex]);
        node.left = buildTree(height - 1, values, startIndex);
        node.right = buildTree(height - 1, values, startIndex + (1 << (height - 1)));

        return node;
    }

    static long calculateP1(TreeNode root) {
        if (root.left == null && root.right == null) {
            return root.value;
        }

        long leftChild = calculateP1(root.left);
        long rightChild = calculateP1(root.right);

        long maxChild = max(leftChild, rightChild);

        return (root.value * maxChild) % MOD;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            int height = scanner.nextInt();
            if (height == 0) {
                break;
            }

            int numNodes = (1 << height) - 1;
            long[] values = new long[numNodes];
            for (int i = 0; i < numNodes; i++) {
                values[i] = scanner.nextLong();
            }

            TreeNode root = buildTree(height, values, 0);
            long result = calculateP1(root);
            System.out.println(result);
        }

        scanner.close();
    }
}
